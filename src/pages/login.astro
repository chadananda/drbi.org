---
export const prerender = false;
export const ssr = true;

import { lucia, adminUser } from '@lib/auth';
import { Argon2id } from "oslo/password";
import Layout from "@layouts/Layout.astro";
import { logoutUser } from '@utils/utils';


// let thisUser = Astro.locals?.user;
// console.log('/login: user:', thisUser);
// if user has a session, clear it (log out) and redirect here
if (Astro.locals?.user) {
  console.log('User found, logging out. ', Astro.locals?.user);
  await logoutUser(Astro);
  return Astro.redirect('/login', 303);
} else console.log('No user session found', Astro.locals);


// Setup for error messaging
let errorMsg = '';

if (Astro.request.method === "POST") {
  // this will fail if not SSR
  const formData = await Astro.request.formData();
  const email = formData.get('email').trim().toLowerCase();
  const password = formData.get('password').trim();
  const isValidEmail = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
  const isValidPassword = /^(?=.*\d).{7,64}$/.test(password); // 1 digit and 7-64 characters
  if (!isValidEmail)  errorMsg = 'Invalid email address.';
    else if (!isValidPassword) errorMsg = 'Invalid password.';

  if (!isValidEmail) console.error('Invalid email address:', email);
  if (!isValidPassword) console.error('Invalid password!',);

   if (!errorMsg) try {
      // Validate against environment variables (single admin user)
      const envEmail = import.meta.env.SITE_ADMIN_EMAIL?.trim().toLowerCase();
      const envPassword = import.meta.env.SITE_ADMIN_PASS?.trim();
      
      if (!envEmail || !envPassword) {
        console.error('Missing SITE_ADMIN_EMAIL or SITE_ADMIN_PASS environment variables');
        errorMsg = 'Server configuration error.';
      } else if (email === envEmail && password === envPassword) {
        // Valid admin credentials - create session
        await logoutUser(Astro);
        const session = await lucia.createSession(adminUser.id, { role: 'superadmin' });
        console.log('Session created successfully');
        
        // Set JWT token directly as session cookie (session.id is the JWT token)
        Astro.cookies.set(lucia.sessionCookieName, session.id, {
          httpOnly: true,
          secure: import.meta.env.APP_ENV !== 'dev',
          sameSite: 'lax',
          path: '/',
          expires: session.expiresAt
        });
        return Astro.redirect('/admin', 303);
      } else {
        errorMsg = 'Invalid email or password.';
      }

    } catch (error) {
        console.error('Authentication error:', error);
        errorMsg = 'An error occurred during authentication.';
    }
}
---

<Layout title="Administration Login">
  <div class="flex justify-center items-center bg-gray-100 py-10 min-h-[80vh]">
    <div class="w-full max-w-xs">
      <form id="login-form" method="POST"
            class="bg-white shadow-md rounded px-8 pt-6 pb-6 mb-4">
        <div id="error-message" role="alert">
          {errorMsg && <p class="text-red-500">{errorMsg}</p>}
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
            Email
            <input type="email" id="email" name="email" required
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
          </label>
        </div>

        <div class="mb-6">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="password">
            Password
            <input type="password" id="password" name="password" required
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" />
          </label>
        </div>

        <div class="flex items-center justify-between">
          <button type="submit"
                  class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
            Sign In
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>
