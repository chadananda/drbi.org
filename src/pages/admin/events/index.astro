---
// src/pages/admin/events/index.astro
export const prerender = false;

import Layout from '@layouts/AdminLayout.astro';
import { getCollection } from 'astro:content';

// Authentication check (same as articles)
const sessionid = Astro.locals.session.id;
const user = Astro.locals?.user;
if (!['admin', 'superadmin'].includes(user?.role)) {
  return Astro.redirect('/admin');
}

// Check for success message
const url = new URL(Astro.request.url);
const created = url.searchParams.get('created');
const successMessage = created === 'true' ? 'Event created successfully!' : null;

// Load all events directly from filesystem (always fresh)
let events = [];
let error = null;

try {
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const eventsDir = path.join(process.cwd(), 'src/content/events');
  const eventFiles = await fs.readdir(eventsDir);
  
  events = await Promise.all(
    eventFiles
      .filter(file => file.endsWith('.json'))
      .map(async (file) => {
        const filePath = path.join(eventsDir, file);
        const content = await fs.readFile(filePath, 'utf-8');
        const data = JSON.parse(content);
        return { id: file.replace('.json', ''), data };
      })
  );
  
  // Sort by date (upcoming first)
  events.sort((a, b) => new Date(a.data.startDate).getTime() - new Date(b.data.startDate).getTime());
} catch (e) {
  error = e.message;
  console.error('Error loading events:', e);
}

// Filter old events by default (more than 1 week past)
const oneWeekAgo = new Date();
oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

const allEvents = [...events];
const filteredEvents = events.filter(event => {
  const eventDate = new Date(event.data.endDate || event.data.startDate);
  return eventDate >= oneWeekAgo;
});


const formatDate = (dateStr) => {
  return new Date(dateStr).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: '2-digit'
  });
};

const getEventStatus = (event) => {
  const now = new Date();
  const start = new Date(event.data.startDate);
  const end = new Date(event.data.endDate || event.data.startDate);
  
  if (end < now) return 'past';
  if (start <= now && end >= now) return 'active';
  return 'upcoming';
};

const getEventLocation = (event) => {
  // If event has a physical location with city and state, it's onsite
  if (event.data.location && event.data.location.city && event.data.location.state) {
    return 'onsite';
  }
  
  // Otherwise check highlights for Virtual
  const highlights = event.data.highlights || [];
  return highlights.includes('Virtual') ? 'online' : 'onsite';
};
---

<Layout title="Event Management - DRBI Admin">
  <div class="max-w-6xl mx-auto px-6 py-6" data-sessionid={sessionid}>
    <header class="mb-8">
      <div class="flex items-center gap-3 mb-2">
        <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
          <span class="text-white text-xl">📅</span>
        </div>
        <h1 class="text-2xl font-bold text-gray-900">Event Management</h1>
      </div>
      <p class="text-gray-600">Manage events from external sources and create manual events</p>
    </header>

    {successMessage && <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-800" id="success-toast">
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
        <span class="font-medium">{successMessage}</span>
      </div>
    </div>}

    {error && (
      <div class="p-4 bg-red-50 border border-red-200 rounded-lg text-red-800 mb-6">
        <h3 class="font-semibold">Error Loading Events</h3>
        <p>{error}</p>
      </div>
    )}

    <div class="flex flex-col lg:flex-row gap-4 mb-6">
      <div class="flex gap-4">
        <button id="sync-external" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors inline-flex items-center gap-2">
          <span>🔄</span>
          Sync External Events
        </button>
        <a href="/admin/events/add" class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition-colors inline-flex items-center gap-2">
          <span>➕</span>
          Add Event
        </a>
        <button id="toggle-old-events" class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors inline-flex items-center gap-2">
          <span>📅</span>
          <span class="toggle-text">Show Old Events</span>
        </button>
      </div>
      
      <!-- Filters -->
      <div class="flex gap-3">
        <select id="status-filter" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="all">All Status</option>
          <option value="upcoming">Upcoming</option>
          <option value="active">Active</option>
          <option value="past">Past</option>
        </select>
        
        <select id="location-filter" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="all">All Locations</option>
          <option value="onsite">Onsite</option>
          <option value="online">Online</option>
        </select>
        
        <select id="visibility-filter" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="all">All Events</option>
          <option value="visible">Visible Only</option>
          <option value="hidden">Hidden Only</option>
        </select>
      </div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div class="bg-white border border-gray-200 rounded-xl p-6 text-center shadow-sm">
        <h3 class="text-3xl font-bold text-blue-600 mb-2">{filteredEvents.length}</h3>
        <p class="text-gray-600 font-medium">Upcoming Events</p>
      </div>
      <div class="bg-white border border-gray-200 rounded-xl p-6 text-center shadow-sm">
        <h3 class="text-3xl font-bold text-blue-600 mb-2">{events.filter(e => e.data.source === 'external').length}</h3>
        <p class="text-gray-600 font-medium">External Events</p>
      </div>
      <div class="bg-white border border-gray-200 rounded-xl p-6 text-center shadow-sm">
        <h3 class="text-3xl font-bold text-blue-600 mb-2">{events.filter(e => e.data.source === 'manual').length}</h3>
        <p class="text-gray-600 font-medium">Manual Events</p>
      </div>
      <div class="bg-white border border-gray-200 rounded-xl p-6 text-center shadow-sm">
        <h3 class="text-3xl font-bold text-blue-600 mb-2">{events.filter(e => e.data.visible === false).length}</h3>
        <p class="text-gray-600 font-medium">Hidden Events</p>
      </div>
    </div>

    <div id="events-list">
      {filteredEvents.map(event => (
        <div class={`bg-white border border-gray-200 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow mb-4 ${getEventStatus(event) === 'past' ? 'bg-gray-50' : ''} ${!event.data.visible ? 'opacity-75' : ''}`}>
          <div class="flex gap-6">
            <!-- Left: Large Main Image -->
            <div class="flex-shrink-0">
              {event.data.mainImage ? (
                <img 
                  src={event.data.mainImage?.startsWith('https://drbi.s3.amazonaws.com') 
                    ? `https://drbi.imgix.net${event.data.mainImage.replace('https://drbi.s3.amazonaws.com', '')}?w=400&h=240&fit=crop&crop=center&auto=format,compress&q=75`
                    : event.data.mainImage}
                  alt={event.data.name}
                  class="w-48 h-32 object-cover rounded-lg border border-gray-200 shadow-sm"
                  loading="lazy"
                />
              ) : (
                <div class="w-48 h-32 bg-gray-100 rounded-lg border border-gray-200 flex items-center justify-center">
                  <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
              )}
              
              {event.data.highlights && event.data.highlights.length > 0 && (
                <div class="mt-2 flex flex-wrap gap-1">
                  {event.data.highlights.map(highlight => (
                    <span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">
                      {highlight}
                    </span>
                  ))}
                </div>
              )}
            </div>
            
            <!-- Right: Content Area -->
            <div class="flex-1 min-w-0">
              <!-- Top: Title, Date, and Teacher Thumbnail -->
              <div class="flex items-start justify-between mb-4">
                <div class="flex-1 min-w-0">
                  <h3 class="text-2xl font-bold text-gray-900 leading-tight mb-2">{event.data.name}</h3>
                  <div class="flex items-center gap-3">
                    <span class="text-lg font-semibold text-blue-700">{formatDate(event.data.startDate)}</span>
                    {event.data.endDate && event.data.endDate !== event.data.startDate && (
                      <span class="text-base text-gray-600">to {formatDate(event.data.endDate)}</span>
                    )}
                  </div>
                </div>
                
                <!-- Small Teacher Thumbnail -->
                <div class="flex-shrink-0 ml-4">
                  {event.data.teacherImage ? (
                    <img 
                      src={event.data.teacherImage.startsWith('https://drbi.s3.amazonaws.com') 
                        ? `https://drbi.imgix.net${event.data.teacherImage.replace('https://drbi.s3.amazonaws.com', '')}?w=160&h=160&fit=crop&crop=face,center&auto=format,compress&q=75`
                        : `https://drbi.imgix.net/events/${event.data.id}-teacher.jpg?w=160&h=160&fit=crop&crop=face,center&auto=format,compress&q=75`}
                      alt="Teacher"
                      class="w-16 h-16 object-cover rounded-full border-2 border-gray-200 shadow-sm"
                      loading="lazy"
                      onerror="this.style.display='none'"
                    />
                  ) : null}
                </div>
              </div>
              
              <!-- Middle: Data Row with Location, Status, and Action Buttons -->
              <div class="flex items-center gap-6 mb-4">
                <!-- Tags -->
                <div class="flex items-center gap-3">
                  <span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">
                    {getEventLocation(event) === 'online' ? 'Online' : 'Onsite'}
                  </span>
                  <span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">
                    {getEventStatus(event) === 'upcoming' ? 'Upcoming' : 
                     getEventStatus(event) === 'active' ? 'Active' : 'Past'}
                  </span>
                </div>
                
                <!-- Action Buttons -->
                <div class="flex items-center gap-3 ml-auto">
                  {event.data.source === 'manual' && (
                    <button 
                      class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors delete-event"
                      data-event-id={event.data.id}
                      title="Delete event"
                    >
                      🗑️
                    </button>
                  )}
                  
                  <a href={event.data.registrationUrl || event.data.url} target="_blank" class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                    View
                  </a>
                  
                  <button 
                    class={`inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors cursor-pointer ${event.data.visible ? 'text-gray-600 bg-gray-50 hover:bg-gray-100' : 'text-gray-600 bg-gray-50 hover:bg-gray-100'}`}
                    data-event-id={event.data.id}
                    title={event.data.visible ? 'Hide event' : 'Show event'}
                  >
                    {event.data.visible ? '👁️ Hide' : '🙈 Show'}
                  </button>
                  
                  <a href={`/admin/events/${event.data.id}`} class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-green-500 to-green-600 rounded-lg hover:from-green-600 hover:to-green-700 transition-all">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Edit
                  </a>
                </div>
              </div>
              
              <!-- Bottom: Description -->
              {event.data.shortDescription && (
                <div class="text-gray-700 text-sm leading-relaxed">
                  {event.data.shortDescription}
                </div>
              )}
              {event.data.fullDescription && !event.data.shortDescription && (
                <div class="text-gray-700 text-sm leading-relaxed line-clamp-3">
                  {event.data.fullDescription}
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>


    {events.length === 0 && (
      <div class="bg-white border border-gray-200 rounded-xl p-12 text-center shadow-sm">
        <p class="text-gray-600">No events found. Try syncing from external sources or add a manual event.</p>
      </div>
    )}
  </div>

  <!-- Hidden data for client-side filtering -->
  <script type="application/json" id="events-data" set:html={JSON.stringify(filteredEvents.map(event => ({
    id: event.data.id,
    name: event.data.name,
    startDate: event.data.startDate,
    endDate: event.data.endDate,
    location: event.data.location,
    source: event.data.source,
    visible: event.data.visible,
    registrationUrl: event.data.registrationUrl,
    url: event.data.url,
    mainImage: event.data.mainImage,
    teacherImage: event.data.teacherImage,
    shortDescription: event.data.shortDescription,
    fullDescription: event.data.fullDescription
  })))}></script>

  <script>
    // Auto-hide success toast
    const successToast = document.getElementById('success-toast');
    if (successToast) {
      setTimeout(() => {
        successToast.style.opacity = '0';
        setTimeout(() => successToast.remove(), 300);
      }, 4000);
    }

    // Session ID for API calls (use actual JWT token from cookie)
    const sessionCookieName = 'auth_session'; // Lucia session cookie name
    const sessionid = document.cookie
      .split('; ')
      .find(row => row.startsWith(sessionCookieName + '='))
      ?.split('=')[1] || document.querySelector('[data-sessionid]').dataset.sessionid;
    
    // Load events data
    const allEventsData = JSON.parse(document.getElementById('events-data').textContent);
    let showingOldEvents = false;
    
    // Helper functions
    const formatDate = (dateStr) => {
      return new Date(dateStr).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit'
      });
    };
    
    const getEventStatus = (event) => {
      const now = new Date();
      const start = new Date(event.startDate);
      const end = new Date(event.endDate || event.startDate);
      
      if (end < now) return 'past';
      if (start <= now && end >= now) return 'active';
      return 'upcoming';
    };
    
    const getEventLocation = (event) => {
      // If event has a physical location with city and state, it's onsite
      if (event.location && event.location.city && event.location.state) {
        return 'onsite';
      }
      
      // Otherwise check highlights for Virtual
      const highlights = event.highlights || [];
      return highlights.includes('Virtual') ? 'online' : 'onsite';
    };
    
    const isEventOld = (event) => {
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      const eventDate = new Date(event.endDate || event.startDate);
      return eventDate < oneWeekAgo;
    };
    
    const renderEventsTable = (events) => {
      const container = document.getElementById('events-list');
      container.className = '';
      container.innerHTML = events.map(event => {
        const status = getEventStatus(event);
        const eventLocation = getEventLocation(event);
        const endDateStr = event.endDate && event.endDate !== event.startDate 
          ? `<span class="text-base text-gray-600">to ${formatDate(event.endDate)}</span>` 
          : '';
        
        return `
          <div class="${status === 'past' ? 'bg-gray-50' : 'bg-white'} border border-gray-200 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow mb-4 ${!event.visible ? 'opacity-75' : ''}">
            <div class="flex gap-6">
              <!-- Left: Large Main Image -->
              <div class="flex-shrink-0">
                ${event.mainImage ? `
                  <img 
                    src="https://drbi.imgix.net${event.mainImage.replace('https://drbi.s3.amazonaws.com', '')}?w=400&h=240&fit=crop&crop=center&auto=format,compress&q=75"
                    alt="${event.name}"
                    class="w-48 h-32 object-cover rounded-lg border border-gray-200 shadow-sm"
                    loading="lazy"
                  />
                ` : `
                  <div class="w-48 h-32 bg-gray-100 rounded-lg border border-gray-200 flex items-center justify-center">
                    <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                `}
                
                ${event.highlights && event.highlights.length > 0 ? `
                  <div class="mt-2 flex flex-wrap gap-1">
                    ${event.highlights.map(highlight => 
                      `<span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">${highlight}</span>`
                    ).join('')}
                  </div>
                ` : ''}
              </div>
              
              <!-- Right: Content Area -->
              <div class="flex-1 min-w-0">
                <!-- Top: Title, Date, and Teacher Thumbnail -->
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1 min-w-0">
                    <h3 class="text-2xl font-bold text-gray-900 leading-tight mb-2">${event.name}</h3>
                    <div class="flex items-center gap-3">
                      <span class="text-lg font-semibold text-blue-700">${formatDate(event.startDate)}</span>
                      ${endDateStr}
                    </div>
                  </div>
                  
                  <!-- Small Teacher Thumbnail -->
                  <div class="flex-shrink-0 ml-4">
                    ${event.teacherImage ? `<img 
                      src="${event.teacherImage.startsWith('https://drbi.s3.amazonaws.com') 
                        ? `https://drbi.imgix.net${event.teacherImage.replace('https://drbi.s3.amazonaws.com', '')}?w=160&h=160&fit=crop&crop=face,center&auto=format,compress&q=75`
                        : `https://drbi.imgix.net/events/${event.id}-teacher.jpg?w=160&h=160&fit=crop&crop=face,center&auto=format,compress&q=75`}"
                      alt="Teacher"
                      class="w-16 h-16 object-cover rounded-full border-2 border-gray-200 shadow-sm"
                      loading="lazy"
                      onerror="this.style.display='none'"
                    />` : ''}
                  </div>
                </div>
                
                <!-- Middle: Data Row with Tags and Action Buttons -->
                <div class="flex items-center gap-6 mb-4">
                  <!-- Tags -->
                  <div class="flex items-center gap-3">
                    <span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">
                      ${eventLocation === 'online' ? 'Online' : 'Onsite'}
                    </span>
                    <span class="inline-flex px-2 py-1 text-xs font-medium rounded border bg-gray-50 text-gray-700 border-gray-200">
                      ${status === 'upcoming' ? 'Upcoming' : 
                        status === 'active' ? 'Active' : 'Past'}
                    </span>
                  </div>
                  
                  <!-- Action Buttons -->
                  <div class="flex items-center gap-3 ml-auto">
                    ${event.source === 'manual' ? `
                      <button 
                        class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors delete-event"
                        data-event-id="${event.id}"
                        title="Delete event"
                      >
                        🗑️
                      </button>
                    ` : ''}
                    
                    <a href="${event.registrationUrl || event.url}" target="_blank" class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                      </svg>
                      View
                    </a>
                    
                    <button 
                      class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-600 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer toggle-visibility"
                      data-event-id="${event.id}"
                      title="${event.visible ? 'Hide event' : 'Show event'}"
                    >
                      ${event.visible ? '👁️ Hide' : '🙈 Show'}
                    </button>
                    
                    <a href="/admin/events/${event.id}" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-green-500 to-green-600 rounded-lg hover:from-green-600 hover:to-green-700 transition-all">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                      Edit
                    </a>
                  </div>
                </div>
                
                <!-- Bottom: Description -->
                ${event.shortDescription ? `
                  <div class="text-gray-700 text-sm leading-relaxed">
                    ${event.shortDescription}
                  </div>
                ` : event.fullDescription ? `
                  <div class="text-gray-700 text-sm leading-relaxed line-clamp-3">
                    ${event.fullDescription}
                  </div>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
    };
    
    // Toggle old events
    document.getElementById('toggle-old-events')?.addEventListener('click', () => {
      showingOldEvents = !showingOldEvents;
      const button = document.getElementById('toggle-old-events');
      const toggleText = button.querySelector('.toggle-text');
      
      if (showingOldEvents) {
        // Show all events
        renderEventsTable(allEventsData);
        toggleText.textContent = 'Hide Old Events';
      } else {
        // Filter out old events
        const filteredEvents = allEventsData.filter(event => !isEventOld(event));
        renderEventsTable(filteredEvents);
        toggleText.textContent = 'Show Old Events';
      }
    });
    
    // Sync external events
    document.getElementById('sync-external')?.addEventListener('click', async () => {
      const button = document.getElementById('sync-external');
      const originalText = button.innerHTML;
      button.innerHTML = '<span class="icon">⏳</span> Syncing...';
      button.disabled = true;
      
      try {
        const response = await fetch('/api/events', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'sync-external', sessionid })
        });
        
        if (response.ok) {
          const result = await response.json();
          if (result.hasChanges) {
            alert('Events synced successfully! Refreshing page...');
            window.location.reload();
          } else {
            alert('No new events found.');
          }
        } else {
          alert('Failed to sync events. Please try again.');
        }
      } catch (error) {
        console.error('Sync error:', error);
        alert('Error syncing events. Check console for details.');
      } finally {
        button.innerHTML = originalText;
        button.disabled = false;
      }
    });
    
    // Toggle visibility
    document.querySelectorAll('.visibility-toggle').forEach(button => {
      button.addEventListener('click', async () => {
        const eventId = button.dataset.eventId;
        
        try {
          const response = await fetch('/api/events', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              action: 'toggle-visibility', 
              eventData: { id: eventId },
              sessionid 
            })
          });
          
          if (response.ok) {
            const result = await response.json();
            button.className = `p-1 rounded hover:bg-gray-100 transition-colors ${result.visible ? 'text-green-600' : 'text-red-600'}`;
            button.innerHTML = result.visible ? '👁️' : '🙈';
            button.title = result.visible ? 'Hide event' : 'Show event';
            
            // Update row styling
            const row = button.closest('tr');
            if (result.visible) {
              row.classList.remove('opacity-60');
            } else {
              row.classList.add('opacity-60');
            }
          } else {
            alert('Failed to toggle visibility. Please try again.');
          }
        } catch (error) {
          console.error('Toggle error:', error);
          alert('Error toggling visibility. Check console for details.');
        }
      });
    });
    
    // Delete manual events
    document.querySelectorAll('.delete-event').forEach(button => {
      button.addEventListener('click', async () => {
        const eventId = button.dataset.eventId;
        
        if (!confirm('Are you sure you want to delete this event? This cannot be undone.')) {
          return;
        }
        
        try {
          const response = await fetch('/api/events', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              action: 'delete', 
              eventData: { id: eventId },
              sessionid 
            })
          });
          
          if (response.ok) {
            // Remove event card from the page
            const eventCard = button.closest('.bg-white.border.border-gray-200');
            if (eventCard) {
              eventCard.remove();
            }
            alert('Event deleted successfully.');
            // Refresh the page to update counters
            window.location.reload();
          } else {
            const errorText = await response.text();
            console.error('Delete failed:', response.status, errorText);
            alert('Failed to delete event. Please try again.');
          }
        } catch (error) {
          console.error('Delete error:', error);
          alert('Error deleting event. Check console for details.');
        }
      });
    });
  </script>

</Layout>