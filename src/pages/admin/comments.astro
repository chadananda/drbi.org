---
export const prerender = false; // SSR only

import Layout from "@layouts/AdminLayout.astro";
import { getAllComments, getCommentStats } from '@utils/comment-storage.js';

const comments = await getAllComments();
const stats = await getCommentStats();

// Group comments by status for easier management
const recentComments = comments.slice(0, 50); // Latest 50 comments
const starredComments = comments.filter(c => c.starred);

// Group by post for better organization
const commentsByPost = {};
recentComments.forEach(comment => {
  if (!commentsByPost[comment.postid]) {
    commentsByPost[comment.postid] = [];
  }
  commentsByPost[comment.postid].push(comment);
});
---

<Layout title="Comment Management">
  <div class="max-w-6xl mx-auto px-6 py-6">
    
    <!-- Header & Stats -->
    <div class="mb-8">
      <div class="flex items-center gap-3 mb-2">
        <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
          <span class="text-white text-xl">üí¨</span>
        </div>
        <h1 class="text-2xl font-bold text-gray-900">Comment Management</h1>
      </div>
      <p class="text-gray-600">View and manage comments from your website</p>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
          <h3 class="text-lg font-semibold text-blue-800">Total Comments</h3>
          <p class="text-2xl font-bold text-blue-600">{stats.total}</p>
        </div>
        <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
          <h3 class="text-lg font-semibold text-yellow-800">Starred Comments</h3>
          <p class="text-2xl font-bold text-yellow-600">{stats.starred}</p>
        </div>
        <div class="bg-green-50 p-4 rounded-lg border border-green-200">
          <h3 class="text-lg font-semibold text-green-800">Recent (7 days)</h3>
          <p class="text-2xl font-bold text-green-600">{stats.recent}</p>
        </div>
      </div>
    </div>

    <!-- Tabs -->
    <div class="mb-6">
      <nav class="flex space-x-8 border-b border-gray-200">
        <button class="tab-btn active py-2 px-1 border-b-2 border-blue-500 font-medium text-blue-600" data-tab="recent">
          Recent Comments
        </button>
        <button class="tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700" data-tab="starred">
          Starred Comments ({stats.starred})
        </button>
        <button class="tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700" data-tab="by-post">
          By Post
        </button>
      </nav>
    </div>

    <!-- Recent Comments Tab -->
    <div class="tab-content" id="recent-tab">
      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Latest Comments</h3>
        </div>
        <div class="divide-y divide-gray-200">
          {recentComments.map((comment) => (
            <div class="comment-item p-6" data-comment-id={comment.id}>
              <div class="flex items-start justify-between">
                <div class="flex-1">
                  <div class="flex items-center space-x-2 mb-2">
                    <span class="font-medium text-gray-900">{comment.name}</span>
                    <span class="text-sm text-gray-500">‚Ä¢</span>
                    <span class="text-sm text-gray-500">{new Date(comment.date).toLocaleDateString()}</span>
                    <span class="text-sm text-gray-500">‚Ä¢</span>
                    <a href={`/${comment.postid}`} class="text-sm text-blue-600 hover:text-blue-800">
                      {comment.postid}
                    </a>
                    {comment.starred && (
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        ‚≠ê Starred
                      </span>
                    )}
                    {comment.ai_score && (
                      <span class="text-xs text-gray-400">
                        AI: {Math.round(comment.ai_score * 100)}%
                      </span>
                    )}
                  </div>
                  <p class="text-gray-700 mb-3">{comment.content}</p>
                  
                  <!-- Admin Actions -->
                  <div class="flex space-x-3 text-sm">
                    <button class="reply-btn text-blue-600 hover:text-blue-800" data-comment-id={comment.id}>
                      Reply
                    </button>
                    <button class="star-btn text-yellow-600 hover:text-yellow-800" 
                            data-comment-id={comment.id} 
                            data-starred={comment.starred}>
                      {comment.starred ? 'Unstar' : 'Star'}
                    </button>
                    <button class="delete-btn text-red-600 hover:text-red-800" data-comment-id={comment.id}>
                      Delete
                    </button>
                  </div>
                  
                  <!-- Reply Form (hidden by default) -->
                  <div class="reply-form mt-4 hidden" id={`reply-form-${comment.id}`}>
                    <form class="space-y-3" data-comment-id={comment.id}>
                      <textarea 
                        class="w-full p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                        rows="3" 
                        placeholder="Write your admin reply..."
                        required></textarea>
                      <div class="flex space-x-2">
                        <button type="submit" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                          Post Reply
                        </button>
                        <button type="button" 
                                class="cancel-reply px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                          Cancel
                        </button>
                      </div>
                    </form>
                  </div>
                  
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Starred Comments Tab -->
    <div class="tab-content hidden" id="starred-tab">
      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Starred Comments</h3>
        </div>
        <div class="divide-y divide-gray-200">
          {starredComments.map((comment) => (
            <div class="comment-item p-6" data-comment-id={comment.id}>
              <div class="flex items-start justify-between">
                <div class="flex-1">
                  <div class="flex items-center space-x-2 mb-2">
                    <span class="font-medium text-gray-900">{comment.name}</span>
                    <span class="text-sm text-gray-500">‚Ä¢</span>
                    <span class="text-sm text-gray-500">{new Date(comment.date).toLocaleDateString()}</span>
                    <span class="text-sm text-gray-500">‚Ä¢</span>
                    <a href={`/${comment.postid}`} class="text-sm text-blue-600 hover:text-blue-800">
                      {comment.postid}
                    </a>
                  </div>
                  <p class="text-gray-700 mb-3">{comment.content}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- By Post Tab -->
    <div class="tab-content hidden" id="by-post-tab">
      <div class="space-y-6">
        {Object.entries(commentsByPost).map(([postid, postComments]) => (
          <div class="bg-white shadow-sm rounded-lg overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <h3 class="text-lg font-medium text-gray-900">
                <a href={`/${postid}`} class="text-blue-600 hover:text-blue-800">{postid}</a>
                <span class="ml-2 text-sm text-gray-500">({postComments.length} comments)</span>
              </h3>
            </div>
            <div class="divide-y divide-gray-200">
              {postComments.map((comment) => (
                <div class="p-4">
                  <div class="flex items-center space-x-2 mb-2">
                    <span class="font-medium text-gray-900">{comment.name}</span>
                    <span class="text-sm text-gray-500">{new Date(comment.date).toLocaleDateString()}</span>
                  </div>
                  <p class="text-gray-700 text-sm">{comment.content}</p>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>

  </div>

  <!-- JavaScript for interactivity -->
  <script>
    // Tab switching
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const targetTab = btn.dataset.tab;
        
        // Update tab buttons
        document.querySelectorAll('.tab-btn').forEach(b => {
          b.classList.remove('active', 'border-blue-500', 'text-blue-600');
          b.classList.add('border-transparent', 'text-gray-500');
        });
        btn.classList.add('active', 'border-blue-500', 'text-blue-600');
        btn.classList.remove('border-transparent', 'text-gray-500');
        
        // Update tab content
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.add('hidden');
        });
        document.getElementById(`${targetTab}-tab`).classList.remove('hidden');
      });
    });

    // Reply functionality
    document.querySelectorAll('.reply-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const commentId = btn.dataset.commentId;
        const replyForm = document.getElementById(`reply-form-${commentId}`);
        replyForm.classList.toggle('hidden');
      });
    });

    // Cancel reply
    document.querySelectorAll('.cancel-reply').forEach(btn => {
      btn.addEventListener('click', () => {
        const replyForm = btn.closest('.reply-form');
        replyForm.classList.add('hidden');
      });
    });

    // Star/unstar comments
    document.querySelectorAll('.star-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        const commentId = btn.dataset.commentId;
        const isStarred = btn.dataset.starred === 'true';
        
        try {
          const response = await fetch('/api/admin/star-comment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              commentId, 
              starred: !isStarred 
            })
          });
          
          if (response.ok) {
            btn.textContent = isStarred ? 'Star' : 'Unstar';
            btn.dataset.starred = (!isStarred).toString();
            
            // Refresh page to update starred count
            location.reload();
          }
        } catch (error) {
          console.error('Error updating star status:', error);
        }
      });
    });

    // Delete comments
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        if (!confirm('Are you sure you want to delete this comment?')) return;
        
        const commentId = btn.dataset.commentId;
        
        try {
          const response = await fetch('/api/admin/delete-comment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ commentId })
          });
          
          if (response.ok) {
            // Remove the comment item from the DOM
            const commentItem = btn.closest('.comment-item');
            commentItem.remove();
          }
        } catch (error) {
          console.error('Error deleting comment:', error);
        }
      });
    });

    // Submit admin replies
    document.querySelectorAll('.reply-form form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const commentId = form.dataset.commentId;
        const textarea = form.querySelector('textarea');
        const replyContent = textarea.value.trim();
        
        if (!replyContent) return;
        
        try {
          const response = await fetch('/api/admin/reply-comment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              parentId: commentId,
              content: replyContent 
            })
          });
          
          if (response.ok) {
            // Clear form and hide it
            textarea.value = '';
            form.closest('.reply-form').classList.add('hidden');
            
            // Refresh to show new reply
            location.reload();
          }
        } catch (error) {
          console.error('Error posting reply:', error);
        }
      });
    });
  </script>


</Layout>