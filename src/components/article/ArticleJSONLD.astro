---
import brand from '@data/branding.json';
import { SEO, TwitterCardType } from "astro-seo";
import { getImage } from "astro:assets";
import { getCollection, getEntry, getEntries } from "astro:content";

// type Props = CollectionEntry<'article'>['data'];
const { title, description, desc_125, keywords, category, language, image, video_main, podcast_main, post_type } = Astro.props;

const author = await getEntry('team', Astro.props.author.id);
const topics = await getEntries(Astro.props.topics);

// for some reason dateModified is not always rendering correctly in Astro
let datePublished = Astro.props.datePublished;
let dateModified = Astro.props.dateModified;
if (!dateModified || isNaN(dateModified.getTime())) dateModified = new Date();
function toIsoStringWithTimezone(d) {
    let z = n => ('0' + n).slice(-2),
        off = d.getTimezoneOffset(),
        sign = off < 0 ? '+' : '-',
        padHours = z(Math.floor(Math.abs(off) / 60)),
        padMinutes = z(Math.abs(off) % 60);
    return d.getFullYear() + '-' + z(d.getMonth() + 1) + '-' + z(d.getDate()) +
           'T' + z(d.getHours()) + ':' + z(d.getMinutes()) + ':' + z(d.getSeconds()) +
           sign + padHours + ':' + padMinutes;
}
datePublished = toIsoStringWithTimezone(datePublished);
dateModified = toIsoStringWithTimezone(dateModified);

const pageURL = Astro.url.href.replace('[::1]', 'localhost').replace(/\/$/, '') //.replace(/:(\d+)/, ':3000')
const siteURL = new URL(pageURL).origin.replace(/\/$/, '');
const authorSlug = author.name ? author.name.toLowerCase().replace(/\s/g, "-") : brand.siteName;
const authorURL = author.url ? author.url : `${siteURL}/author/${authorSlug}`;

// get original image
const imgSrc = await (async () => {
  const imgKey = image.src.src.match(/(\/src\/.+?)\?/)?.[1] ?? null;
  const images = await import.meta.glob('/src/content/*/*/*.{jpeg,jpg,png,gif,webp,avif,svg}');
  return (await images[imgKey]?.())?.default ?? null;
})();

// format image for large twitter card
let twitLarge, twitLargeImage;
if (imgSrc) twitLarge = await getImage({
  src: imgSrc,
  format: "webp", // 2:1 aspect ratio, min 300x157, max 4096x4096 JPG, PNG, WEBP, and GIF
  width: 600, height: 314,
});
twitLargeImage = twitLarge ? {
  url:  `${siteURL}${twitLarge.src}`,
  width: twitLarge.attributes.width,
  height: twitLarge.attributes.height,
} : false;

var video = video_main ? {
  url: video_main.videoURL,
  title: video_main.title,
  description: video_main.description,
  duration: video_main.duration,
  image: video_main.image,
  transcript: video_main.transcript,
} : null;

var audio = podcast_main ? {
  audioURL: `${pageURL}/${podcast_main.audio}`,
  title: podcast_main.title,
  description: podcast_main.description,
  duration: podcast_main.duration,
  episodeNumber: podcast_main.episodeNumber,
  seriesName: podcast_main.seriesName,
  imageURL: `${pageURL}/${podcast_main.image}`,
} : null;

const coverImage = image && image.src ? {
  url: `${siteURL}${image.src.src}`,
  width: image.src.width,
  height: image.src.height,
  alt: image.alt
} : null; // Add a fallback or handle the null case


// console.log('coverImage', coverImage);

// JSON-LD Schema for the article
//  https://validator.schema.org/
const schema = {
  "@context": "https://schema.org",
  "@type": post_type, // Article, WebPage, Event, Organization, Person, LocalBusiness, Product, Recipe, Review, BreadcrumbList, Course, JobPosting, Movie, MusicAlbum, QAPage, SearchResultsPage, SoftwareApplication, VideoObject
  description: description,
  keywords: keywords,
  author: {
    "@type": author.data.type,
    name: author.data.name,
    url: authorURL,
  },
  publisher: {
    "@type": "Organization", //Organization, Corporation, GovernmentOrganization, NGO, EducationalOrganization, SportsTeam, MusicGroup, PerformingGroup, NewsMediaOrganization, FundingScheme, LibrarySystem, MedicalOrganization, WorkersUnion, Consortium, Airline, Brand
    name: brand.siteName, // like "Ocean 2.0 Reader" or "BlogWorks" or "WholeReader"
    logo: {
      "@type": "ImageObject",
      url: brand.logo,
    },
  },
  headline: title,
  image: {
    "@type": "ImageObject",
    "url": coverImage.url, // how to get width and height of image?
    "width": coverImage.width,
    "height": coverImage.height,
  },
  url: pageURL,
  mainEntityOfPage: pageURL,
  articleSection: category,
  inLanguage: language,
  /* the schema expects Date or DateTime using ISO 8601 format.   */
  datePublished: datePublished,
  /* updateDate is optional frontmatter, so we conditionally add dateModified if it exists */
  dateModified: dateModified,
};

//console.log("Schema: ", JSON.stringify(schema, null, 2));

// Meta headers and opengraph objects -
//  https://developers.facebook.com/tools/debug/
//  https://iplocation.io/open-graph-checker
const metaHeaders = {
  link: [{ rel: "icon", href: "/favicon.ico" }],
};
const twitterHeaders = twitLargeImage ? {
  creator: brand.twitter.creator,
  site: brand.twitter.site,
  card: "summary_large_image" as TwitterCardType,
  title: title, // max 55 characters
  description: desc_125, // max 125 characters
  image: twitLargeImage.url, // 2:1 aspect ratio, min 300x157, max 4096x4096 JPG, PNG, WEBP, and GIF
  imageAlt: coverImage.alt, // Alt text for the Twitter card image
  imageWidth: twitLargeImage.width,
  imageHeight: twitLargeImage.height,
} : null;

var openGraphHeaders = {
  basic: {
    url: pageURL,
    type: post_type.toLowerCase(),
    title: title,
    description: description, // max 155 characters
    image: coverImage.url, // 1.91:1 aspect ratio, min 300x157, max 4096x4096 JPG, PNG, WEBP, and GIF
    imageAlt: coverImage.alt,
    imageWidth: coverImage.width,
    imageHeight: coverImage.height,
  },
  image: {
    alt: coverImage.alt,
  },
  article: {
    published_time: datePublished,
    modified_time: dateModified,
    author: author.url,
    section: category,
    tag: topics?.map(t => t.id).join(', '), // assuming topics is an array of references
  },
  video: {}, audio: {},
};

if (video) openGraphHeaders.video ={
  url: video_main ? video.url : '',
  secure_url: video_main ? video_main.videoURL : '', // if https available
  type: 'video.educational', // or appropriate type
}

if (audio) openGraphHeaders.audio = {
  url: audio.audioURL,
  secure_url: audio.audioURL, // if https available
  type: 'audio.podcast', // or appropriate type
}

console.log("openGraphHeaders", openGraphHeaders);

---

<SEO title={title} description={description} canonical={pageURL}
  twitter={twitterHeaders} openGraph={openGraphHeaders} extend={metaHeaders} />

<script type="application/ld+json" set:html={JSON.stringify(schema)} />